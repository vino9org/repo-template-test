# this workflow will be triggered when
#
#  1. a pull request is raised
#  2. a push to 'develop' branch takes place
#  3. a release tag is created on the repo
#
#  whenever the event is trigger, build and test will be performed
#  a container image will be created and pushed to ghcr.io only when the event trigger is push to develop or tag.
#
#  for push to develop branch, develop-YYYYMMDD-HHMISS-SHA7. the tagging should be sortable by chronological order so that
#  it can be picked up by CD tools, e.g. FluxCD, for updating the deployment automatically
#
#  for new tag, the image tag will be same as the repository tag. e.g. v0.1.0
#
#  CAVEATS:
#
#  does not support copmlete gitflow that uses long running release branches.
#  ref develop-python is for testing only. plesae do not remove the setting nor use it as your branch name
#
on:
  push:
    branches:
      # - develop
      # - main
      # only for test in this repo
      - develop-python

  pull_request:
    branches:
      - develop
      - main

  workflow_dispatch:

jobs:
  pytest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - 3.11

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Linting
      run: |
        flake8 --count --show-source --statistics

    - name: Unit tests
      id: unit_tests
      run: |
        pytest -v -s --cov --cov-report=html

        if [[ -f "htmlcov/index.html" ]]; then
          echo "coverage_report=yes" >> $GITHUB_OUTPUT
        fi

    - name: Upload test coverage report to GitHub pages
      if: steps.unit_tests.outputs.coverage_report == 'yes'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: htmlcov

  buildx:
    needs: pytest
    if: startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/develop-python')
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: set image metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=develop-{{date 'YYYYMMDD-HHmmss' tz='Asia/Singapore'}}-{{sha}},enable=${{ github.ref == 'refs/heads/develop' }}
          type=raw,value=temp-{{date 'YYYYMMDD-HHmmss' tz='Asia/Singapore'}}-{{sha}},enable=${{ github.ref == 'refs/heads/develop-python' }}
        flavor: |
          latest=false
        labels: |
          org.opencontainers.image.source https://github.com/{{ github.repository }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up docker buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to ghcr.io
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        # use path context so that .dockerignore will be processed.
        context: .
        platforms: "linux/amd64,linux/arm64"
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  clean-up:
    needs: buildx
    runs-on: ubuntu-latest

    steps:
    - name: Delete old images
      uses: actions/delete-package-versions@v5
      with:
        owner: ${{ github.repository_owner }}
        package-name: ${{ github.event.repository.name }}
        package-type: container
        min-versions-to-keep: 5
        ignore-versions: latest
        token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
